{
  "code_examples": [],
  "broken_examples": [
    {
      "doc": "USAGE_CONTEXT.md",
      "language": "Python",
      "error": "invalid decimal literal (<string>, line 3)",
      "code_snippet": "**Scaling Math**:\n- Peak load: 300 votes/second\n- Transaction time: ~50ms (optimistic)\n- Concurrency"
    },
    {
      "doc": "design/CSS_DESIGN_SYSTEM.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 1)",
      "code_snippet": "---\n\n## Utility Classes\n\nUtilities use `.u-` prefix to separate them from component classes and avoi"
    },
    {
      "doc": "design/CSS_DESIGN_SYSTEM.md",
      "language": "Python",
      "error": "invalid character '\u2192' (U+2192) (<string>, line 8)",
      "code_snippet": "---\n\n## Migration from Old Naming\n\n### Old \u2192 New Mapping\n\n**Utility classes** (now with `.u-` prefix"
    },
    {
      "doc": "guides/PR29_CAMPAIGN_LEARNINGS.md",
      "language": "Python",
      "error": "invalid decimal literal (<string>, line 13)",
      "code_snippet": "---\n\n## \ud83d\udcca Velocity Analysis\n\n### Response Time by Phase\n\n- **Batch 1-2**: 10 responses in 60 min (6."
    },
    {
      "doc": "guides/PRIVATE_OPS_REPO.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 6)",
      "code_snippet": "EOF\n\ncat > policies/two-person-approval.md << 'EOF'\n# Two-Person Approval Policy\n\n**Required for:** "
    },
    {
      "doc": "guides/github/GITHUB_ISSUE_LABEL_MANAGEMENT.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 1)",
      "code_snippet": "---\n\n## Resources\n\n- [GitHub GraphQL API Explorer](https://docs.github.com/en/graphql/overview/explo"
    },
    {
      "doc": "guides/github/GITHUB_PR_MANAGEMENT.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 2)",
      "code_snippet": "# Create PR from current branch\ngh pr create --title \"feat: add new feature\" --body \"Description her"
    },
    {
      "doc": "guides/github/GITHUB_PR_MANAGEMENT.md",
      "language": "Python",
      "error": "unterminated string literal (detected at line 9) (<string>, line 9)",
      "code_snippet": "# Update PR #29 with complete metadata\ngh pr edit 29 \\\n  --add-reviewer agustka \\\n  --add-assignee g"
    },
    {
      "doc": "guides/github/GITHUB_PR_MANAGEMENT.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 2)",
      "code_snippet": "# 1. Request review from agustka (already done \u2705)\ngh pr edit 29 --add-reviewer agustka\n\n# 2. Assign "
    },
    {
      "doc": "guides/github/GITHUB_PR_REVIEW_REPLY_WORKFLOW.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 2)",
      "code_snippet": "# Read the actual file on the branch\nFILE_PATH=$(gh api repos/OWNER/REPO/pulls/comments/COMMENT_ID -"
    },
    {
      "doc": "guides/github/GITHUB_PR_REVIEW_REPLY_WORKFLOW.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 2)",
      "code_snippet": "# Check if there's already an issue for this\ngh issue list --search \"keyword from comment\" --json nu"
    },
    {
      "doc": "guides/github/GITHUB_PR_REVIEW_REPLY_WORKFLOW.md",
      "language": "Python",
      "error": "unterminated string literal (detected at line 1) (<string>, line 1)",
      "code_snippet": "2. **Don't post without saving originals first**\n   - Always backup comment data before any operatio"
    },
    {
      "doc": "integration/DJANGO_SYNC_IMPLEMENTATION.md",
      "language": "Python",
      "error": "invalid character '\u2705' (U+2705) (<string>, line 6)",
      "code_snippet": "[SYNC] Starting weekly member list sync...\n[SYNC] Fetching kennitalas from Django API...\n[SYNC] Rece"
    },
    {
      "doc": "legacy/DJANGO_LEGACY_SYSTEM.md",
      "language": "Python",
      "error": "invalid character '\u251c' (U+251C) (<string>, line 2)",
      "code_snippet": "/home/manager/socialism/\n\u251c\u2500\u2500 membership/          # Core member management\n\u2502   \u251c\u2500\u2500 models.py        "
    },
    {
      "doc": "prompts/BRANCH_DIFF_DOCUMENTATION_AUDIT.md",
      "language": "Python",
      "error": "unterminated string literal (detected at line 8) (<string>, line 8)",
      "code_snippet": "# Stage all archive moves\ngit add archive/\n\n# Stage any deletions\ngit add -u\n\n# Commit with descript"
    },
    {
      "doc": "prompts/COMPARE_FIREBASE_TO_SECURITY_BRANCHES.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 2)",
      "code_snippet": "# Fetch all branches from origin\ngit fetch origin\n\n# List all remote branches\ngit branch -r | grep -"
    },
    {
      "doc": "prompts/COMPARE_FIREBASE_TO_SECURITY_BRANCHES.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 2)",
      "code_snippet": "# Read file from firebase-members-auth branch\ngit show origin/feature/firebase-members-auth:docs/sta"
    },
    {
      "doc": "reviews/PR29_AUDIT_REPORT.md",
      "language": "Python",
      "error": "invalid decimal literal (<string>, line 2)",
      "code_snippet": "$ git log --oneline | head -20\n80b6009 security: remove hardcoded database password from reset-elect"
    },
    {
      "doc": "security/CREDENTIAL_MIGRATION_PLAN.md",
      "language": "Python",
      "error": "invalid syntax. Perhaps you forgot a comma? (<string>, line 10)",
      "code_snippet": "#!/bin/bash\n# Helper script to retrieve secrets from Google Cloud Secret Manager\n# Usage: ./scripts/"
    },
    {
      "doc": "security/CREDENTIAL_MIGRATION_PLAN.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 9)",
      "code_snippet": "#!/bin/bash\n# Helper script for PostgreSQL connections using Cloud SQL Proxy\n# Retrieves password fr"
    },
    {
      "doc": "security/CREDENTIAL_MIGRATION_PLAN.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 7)",
      "code_snippet": "#!/bin/bash\n# Source this file to load environment variables\n# Usage: source ./scripts/load-env.sh\n\n"
    },
    {
      "doc": "security/FIREBASE_APP_CHECK_RESEARCH.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 1)",
      "code_snippet": "import { initializeAppCheck, ReCaptchaEnterpriseProvider } from 'firebase/app-check';\n\nconst appChec"
    },
    {
      "doc": "security/FIREBASE_APP_CHECK_RESEARCH.md",
      "language": "Python",
      "error": "invalid character '\u274c' (U+274C) (<string>, line 3)",
      "code_snippet": "**Attempted Solutions**:\n\n**Solution A: Cloudflare Transform Rules** \u274c\n- Attempted to rewrite Host h"
    },
    {
      "doc": "security/FIREBASE_APP_CHECK_RESEARCH.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 1)",
      "code_snippet": "**Expected Configuration** (from .env.yaml):"
    },
    {
      "doc": "security/FIREBASE_APP_CHECK_RESEARCH.md",
      "language": "Python",
      "error": "invalid character '\u274c' (U+274C) (<string>, line 2)",
      "code_snippet": "**Three Mistakes**:\n1. \u274c Variable names wrong: `KENNI_ISSUER` instead of `KENNI_IS_ISSUER_URL`\n2. \u274c "
    },
    {
      "doc": "security/FIREBASE_APP_CHECK_RESEARCH.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 1)",
      "code_snippet": "import { getToken as getAppCheckToken } from 'firebase/app-check';\n\nconst appCheckToken = await getA"
    },
    {
      "doc": "security/FUNCTIONS_AUDIT_2025-10-16.md",
      "language": "Python",
      "error": "unexpected indent (<string>, line 2)",
      "code_snippet": "# Send 10 requests from same IP in 1 minute\n   for i in {1..10}; do curl -X POST https://handlekenni"
    },
    {
      "doc": "security/ISSUES_41-50_CRITICAL_REVIEW.md",
      "language": "Python",
      "error": "invalid character '\u2705' (U+2705) (<string>, line 1)",
      "code_snippet": "\u2705 Remove password from file (done - commit 80b6009)\n  \u274c Rotate database password (NOT DONE)\n  \u274c Rest"
    },
    {
      "doc": "security/ISSUES_41-50_CRITICAL_REVIEW.md",
      "language": "Python",
      "error": "invalid syntax (<string>, line 2)",
      "code_snippet": "# Force new revisions to pick up new password from Secret Manager\ngcloud run deploy events-service -"
    },
    {
      "doc": "security/ISSUES_41-50_CRITICAL_REVIEW.md",
      "language": "Python",
      "error": "invalid character '\u2705' (U+2705) (<string>, line 13)",
      "code_snippet": "#### Verdict\n\n**Grade:** N/A (security incident, not gradeable)  \n**Status:** Incident is well-docum"
    },
    {
      "doc": "security/ISSUES_41-50_CRITICAL_REVIEW.md",
      "language": "Python",
      "error": "invalid character '\u2192' (U+2192) (<string>, line 4)",
      "code_snippet": "#### Verdict\n\n**Grade:** 7/10 (good idea, needs testing plan)  \n**Priority:** Medium \u2192 **Low** (code"
    },
    {
      "doc": "security/ISSUES_41-50_CRITICAL_REVIEW.md",
      "language": "Python",
      "error": "invalid character '\u2705' (U+2705) (<string>, line 4)",
      "code_snippet": "#### Verdict\n\n**Grade:** 8/10 (good pattern, needs decision on error response)  \n**Priority:** Mediu"
    },
    {
      "doc": "security/ISSUES_41-50_CRITICAL_REVIEW.md",
      "language": "Python",
      "error": "invalid character '\u2192' (U+2192) (<string>, line 4)",
      "code_snippet": "#### Verdict\n\n**Grade:** 6/10 (good documentation, but premature optimization)  \n**Priority:** Mediu"
    },
    {
      "doc": "security/ISSUES_41-50_CRITICAL_REVIEW.md",
      "language": "Python",
      "error": "invalid character '\u2705' (U+2705) (<string>, line 4)",
      "code_snippet": "#### Verdict\n\n**Grade:** 8/10 (good catch, low priority but easy win)  \n**Priority:** Low \u2705 correct "
    },
    {
      "doc": "status/SESSION_2025-10-19_Phase5_Validation_Prep.md",
      "language": "Python",
      "error": "invalid decimal literal (<string>, line 8)",
      "code_snippet": "# 1. Retrieved password from Secret Manager\nexport PGPASSWORD=\"$(gcloud secrets versions access late"
    }
  ],
  "outdated": [],
  "missing_files": [
    {
      "doc": "ARCHITECTURE_RECOMMENDATIONS.md",
      "block": 9,
      "file": "./voting-tokens.json",
      "code_snippet": "import http from 'k6/http';\nimport { check, sleep } from 'k6';\nimport { Rate, Trend } from 'k6/metri"
    },
    {
      "doc": "guides/PRIVATE_OPS_REPO.md",
      "block": 4,
      "file": "policies/access-controls.md",
      "code_snippet": "# Create full structure\nmkdir -p runbooks/{elections,members,infrastructure}\nmkdir -p scripts/{fireb"
    },
    {
      "doc": "guides/PRIVATE_OPS_REPO.md",
      "block": 5,
      "file": "policies/two-person-approval.md",
      "code_snippet": "EOF\n\ncat > policies/two-person-approval.md << 'EOF'\n# Two-Person Approval Policy\n\n**Required for:** "
    },
    {
      "doc": "guides/PRIVATE_OPS_REPO.md",
      "block": 6,
      "file": "runbooks/elections/reset-election.sql",
      "code_snippet": "cat > runbooks/elections/reset-election.sql << 'EOF'\n-- DESTRUCTIVE: Full election reset\n-- Use with"
    },
    {
      "doc": "guides/PRIVATE_OPS_REPO.md",
      "block": 7,
      "file": "runbooks/members/rotate-keys.md",
      "code_snippet": "cat > runbooks/members/rotate-keys.md << 'EOF'\n# Firebase Key Rotation (Members Service)\n\n**Purpose:"
    },
    {
      "doc": "guides/PRIVATE_OPS_REPO.md",
      "block": 14,
      "file": "scripts/firebase/enforce-mfa.js",
      "code_snippet": "cat > scripts/firebase/enforce-mfa.js << 'EOF'\n#!/usr/bin/env node\n\n/**\n * Enforce MFA for elevated "
    },
    {
      "doc": "guides/github/GITHUB_PR_REVIEW_REPLY_WORKFLOW.md",
      "block": 15,
      "file": "/tmp/responses.md",
      "code_snippet": "# Create response template\ncat > /tmp/responses.md <<'EOF'\n# PR Review Responses\n\n## Response to r24"
    },
    {
      "doc": "integration/DJANGO_SYNC_IMPLEMENTATION.md",
      "block": 10,
      "file": "django-api",
      "code_snippet": "/**\n * syncMemberList - Weekly sync of member kennitalas from Django to Firebase\n *\n * Triggered by:"
    },
    {
      "doc": "integration/DJANGO_SYNC_IMPLEMENTATION.md",
      "block": 10,
      "file": "django-api",
      "code_snippet": "/**\n * syncMemberList - Weekly sync of member kennitalas from Django to Firebase\n *\n * Triggered by:"
    },
    {
      "doc": "integration/DJANGO_SYNC_IMPLEMENTATION.md",
      "block": 11,
      "file": "index.js",
      "code_snippet": "{\n  \"name\": \"sync-member-list\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Weekly sync of member kennit"
    },
    {
      "doc": "prompts/BRANCH_DIFF_DOCUMENTATION_AUDIT.md",
      "block": 18,
      "file": "/home/gudro/Development/projects/ekklesia/archive/docs/docs-2025-10-15/README.md",
      "code_snippet": "cat > /home/gudro/Development/projects/ekklesia/archive/docs/docs-2025-10-15/README.md <<'EOF'\n# Doc"
    },
    {
      "doc": "security/CRITICAL_SECURITY_RESPONSE.md",
      "block": 6,
      "file": "test.py",
      "code_snippet": "# Test secret detection\necho 'PASSWORD = \"secret123456789012345678901234567890\"' > test.py\ngit add t"
    },
    {
      "doc": "security/CRITICAL_SECURITY_RESPONSE.md",
      "block": 6,
      "file": "test.py",
      "code_snippet": "# Test secret detection\necho 'PASSWORD = \"secret123456789012345678901234567890\"' > test.py\ngit add t"
    },
    {
      "doc": "status/SESSION_2025-10-19_Phase5_Validation_Prep.md",
      "block": 9,
      "file": "../testing/ADMIN_RESET_TEST_REPORT.md",
      "code_snippet": "# Manual edit required\nvim ../testing/ADMIN_RESET_TEST_REPORT.md\n\n# Commit when done\ngit add ../test"
    }
  ],
  "api_mismatches": [
    {
      "doc": "CRITICAL_REVIEW_RESPONSE.md",
      "api": "GraphQL",
      "issue": "Invalid GraphQL syntax"
    },
    {
      "doc": "CRITICAL_REVIEW_RESPONSE.md",
      "api": "GraphQL",
      "issue": "Invalid GraphQL syntax"
    },
    {
      "doc": "CRITICAL_REVIEW_RESPONSE.md",
      "api": "GraphQL",
      "issue": "Invalid GraphQL syntax"
    },
    {
      "doc": "CRITICAL_REVIEW_RESPONSE.md",
      "api": "GraphQL",
      "issue": "Invalid GraphQL syntax"
    },
    {
      "doc": "guides/PR29_CAMPAIGN_LEARNINGS.md",
      "api": "GraphQL",
      "issue": "Invalid GraphQL syntax"
    },
    {
      "doc": "guides/github/GITHUB_ISSUE_LABEL_MANAGEMENT.md",
      "api": "GraphQL",
      "issue": "Invalid GraphQL syntax"
    },
    {
      "doc": "guides/github/GITHUB_ISSUE_LABEL_MANAGEMENT.md",
      "api": "GraphQL",
      "issue": "Invalid GraphQL syntax"
    },
    {
      "doc": "guides/github/GITHUB_ISSUE_LABEL_MANAGEMENT.md",
      "api": "GraphQL",
      "issue": "Invalid GraphQL syntax"
    },
    {
      "doc": "guides/github/GITHUB_ISSUE_LABEL_MANAGEMENT.md",
      "api": "GraphQL",
      "issue": "Invalid GraphQL syntax"
    },
    {
      "doc": "guides/github/GITHUB_PR_REVIEW_REPLY_WORKFLOW.md",
      "api": "GraphQL",
      "issue": "Invalid GraphQL syntax"
    },
    {
      "doc": "guides/github/GITHUB_PR_REVIEW_REPLY_WORKFLOW.md",
      "api": "GraphQL",
      "issue": "Invalid GraphQL syntax"
    },
    {
      "doc": "integration/DJANGO_SYNC_IMPLEMENTATION.md",
      "api": "Firebase Admin SDK",
      "issue": "Incomplete API usage"
    },
    {
      "doc": "integration/DJANGO_SYNC_IMPLEMENTATION.md",
      "api": "Firebase Admin SDK",
      "issue": "Incomplete API usage"
    },
    {
      "doc": "integration/DJANGO_TO_EKKLESIA_MIGRATION.md",
      "api": "Firebase Admin SDK",
      "issue": "Incomplete API usage"
    }
  ],
  "warnings": [
    {
      "type": "gcloud_command",
      "doc": "guides/ADMIN_ALERTS.md",
      "command": "gcloud monitoring channels list"
    },
    {
      "type": "gcloud_command",
      "doc": "guides/ADMIN_ALERTS.md",
      "command": "gcloud monitoring channels create"
    },
    {
      "type": "gcloud_command",
      "doc": "guides/ADMIN_ALERTS.md",
      "command": "gcloud monitoring policies create"
    },
    {
      "type": "gcloud_command",
      "doc": "guides/ADMIN_ALERTS.md",
      "command": "gcloud monitoring policies create"
    },
    {
      "type": "gcloud_command",
      "doc": "guides/ADMIN_ALERTS.md",
      "command": "gcloud monitoring policies create"
    },
    {
      "type": "gcloud_command",
      "doc": "guides/AUDIT_LOGGING.md",
      "command": "gcloud logging read \\"
    },
    {
      "type": "gcloud_command",
      "doc": "guides/AUDIT_LOGGING.md",
      "command": "gcloud logging sinks create"
    },
    {
      "type": "gcloud_command",
      "doc": "guides/MFA_ENFORCEMENT.md",
      "command": "gcloud firebase:projects:list\n\n# Set"
    },
    {
      "type": "gcloud_command",
      "doc": "integration/DJANGO_SYNC_IMPLEMENTATION.md",
      "command": "gcloud alpha monitoring channels"
    },
    {
      "type": "gcloud_command",
      "doc": "integration/DJANGO_SYNC_IMPLEMENTATION.md",
      "command": "gcloud scheduler jobs pause"
    },
    {
      "type": "gcloud_command",
      "doc": "integration/DJANGO_SYNC_IMPLEMENTATION.md",
      "command": "gcloud scheduler jobs pause"
    },
    {
      "type": "gcloud_command",
      "doc": "prompts/BRANCH_DIFF_DOCUMENTATION_AUDIT.md",
      "command": "gcloud firestore databases list"
    },
    {
      "type": "gcloud_command",
      "doc": "prompts/BRANCH_DIFF_DOCUMENTATION_AUDIT.md",
      "command": "gcloud (Google Cloud CLI)"
    },
    {
      "type": "gcloud_command",
      "doc": "security/CRITICAL_SECURITY_RESPONSE.md",
      "command": "gcloud admin permissions)\n/tmp/rotate-password.sh"
    },
    {
      "type": "gcloud_command",
      "doc": "status/SESSION_2025-10-19_Phase5_Validation_Prep.md",
      "command": "gcloud auth print-access-token)\" \\"
    },
    {
      "type": "gcloud_command",
      "doc": "status/SESSION_2025-10-19_Phase5_Validation_Prep.md",
      "command": "gcloud logging read \\"
    },
    {
      "type": "gcloud_command",
      "doc": "status/SESSION_2025-10-19_Phase5_Validation_Prep.md",
      "command": "gcloud logging read \"...\""
    },
    {
      "type": "gcloud_command",
      "doc": "status/SESSION_2025-10-19_Phase5_Validation_Prep.md",
      "command": "gcloud auth application-default login"
    },
    {
      "type": "gcloud_command",
      "doc": "testing/ADMIN_RESET_CHECKLIST.md",
      "command": "gcloud logging read \""
    },
    {
      "type": "gcloud_command",
      "doc": "testing/ADMIN_RESET_CHECKLIST.md",
      "command": "gcloud logging read \"...\""
    }
  ]
}