#!/usr/bin/env node
/**
 * Migrate Events to Firestore
 *
 * Moves the hardcoded Facebook events from events.js to Firestore collection
 *
 * Usage:
 *   node scripts/migrate-events-to-firestore.js
 */

const admin = require('firebase-admin');

// Initialize Firebase Admin with default credentials
// This will use Application Default Credentials from gcloud
admin.initializeApp({
  projectId: 'ekklesia-prod-10-2025'
});

const db = admin.firestore();

// Event data from apps/members-portal/js/events.js
const events = [
  {
    title: 'M√°l√æing um sveitarstj√≥rnarm√°l',
    date: new Date('2025-11-01T10:00:00+00:00'), // 1. n√≥vember 2025, kl. 10:00
    endDate: new Date('2025-11-01T14:30:00+00:00'), // kl. 14:30
    description: 'Opinn fundur um sveitastj√≥rnarm√°l √æar sem allir f√° t√¶kif√¶ri til a√∞ segja s√≠na sko√∞un og heyra sko√∞un annara.\n\nDagskr√°:\n‚Ä¢ Fullr√∫ar fr√° sv√¶√∞isf√©l√∂gum s√≥s√≠alista segir fr√° sinni s√Ωn √° sveitastj√≥rnarm√°lum\n‚Ä¢ Hl√©\n‚Ä¢ Almennar umr√¶√∞ur um sveitastj√≥rnarm√°l √æar sem f√©lagsmenn f√° a√∞ segja s√≠na sko√∞un\n‚Ä¢ Kaffi og l√©ttar veitingar √≠ bo√∞i',
    location: 'Hverfisgata 105, 101 Reykjav√≠k',
    status: 'upcoming',
    organizers: ['S√≥s√≠alistaflokkur √çslands'],
    createdAt: admin.firestore.FieldValue.serverTimestamp(),
    updatedAt: admin.firestore.FieldValue.serverTimestamp()
  },
  {
    title: 'T√∂lum um h√∫sn√¶√∞ism√°l',
    date: new Date('2025-09-25T20:00:00+00:00'), // 25. september 2025, kl. 20:00
    endDate: new Date('2025-09-25T21:30:00+00:00'), // kl. 21:30
    description: 'J√≥n Ferdinand Estherarson fjallar um h√∫sn√¶√∞ism√°lin. H√∫sn√¶√∞ism√°l eru √≠ dag eitt st√¶rsta verkefni√∞ sem unga f√≥lki√∞, l√°glaunaf√≥lk og efnaminni eru a√∞ takast √° vi√∞. Verkefni√∞ er al√æj√≥√∞legt, en h√©r √° √çslandi er √æa√∞ engu a√∞ s√≠√∞ur einstakt. Hva√∞ er til r√°√∞a? Og hva√∞ getur r√≥tt√¶kur stj√≥rnm√°lafl√≥kkur gert til a√∞ bjarga √æeim sem √≠ vandr√¶√∞um eru?\n\nKomdu og t√∂kum √æetta saman! √ç h√∫sakynnum S√≥s√≠alistaflokks √çslands, Hverfisg√∂tu 105, Rvk. og √° zoom.',
    location: 'S√≥s√≠alistaflokkur √çslands, Hverfisg√∂tu 105',
    onlineLink: 'https://zoom.us/j/example', // Zoom link from Facebook
    status: 'upcoming',
    organizers: ['Birna Gunnlaugsd√≥ttir', 'Markus Candi'],
    createdAt: admin.firestore.FieldValue.serverTimestamp(),
    updatedAt: admin.firestore.FieldValue.serverTimestamp()
  },
  {
    title: 'F√©lagsfundur Okt√≥ber 2025',
    date: new Date('2025-10-25T10:30:00+00:00'), // 25. okt√≥ber 2025, kl. 10:30
    endDate: new Date('2025-10-25T12:00:00+00:00'), // ~1.5 klst
    description: 'F√©lagsfundur S√≥s√≠alistaflokks √çslands.\n\nH√∫si√∞ opnar klukkan 10:30 og fundurinn hefst stundv√≠slega klukkan 11:00. Bo√∞i√∞ var upp √° a√∞ taka √æ√°tt √≠ gegnum Zoom.\n\nDagskr√°:\n1. Framkv√¶mdastj√≥rn segir fr√° starfinu\n2. M√°lefnastj√≥rn segir fr√° starfinu\n3. Kosningastj√≥rn segir fr√° starfinu\n4. Sagt fr√° starfi sv√¶√∞isf√©laga\n5. √ñnnur m√°l\n\nL√©ttar veitingar voru √≠ bo√∞i.',
    location: 'Hverfisgata 105, 101 Reykjav√≠k',
    status: 'past',
    organizers: ['S√≥s√≠alistaflokkur √çslands'],
    createdAt: admin.firestore.FieldValue.serverTimestamp(),
    updatedAt: admin.firestore.FieldValue.serverTimestamp()
  }
];

async function migrateEvents() {
  try {
    console.log('üöÄ Starting event migration to Firestore...\n');

    const batch = db.batch();
    const eventsRef = db.collection('events');

    // Check if events already exist
    const existingEvents = await eventsRef.get();
    if (!existingEvents.empty) {
      console.log(`‚ö†Ô∏è  Found ${existingEvents.size} existing events in Firestore.`);
      console.log('Do you want to delete them first? (Ctrl+C to cancel, Enter to continue)\n');
      // For now, we'll add them anyway with unique IDs
    }

    let addedCount = 0;
    for (const event of events) {
      const docRef = eventsRef.doc(); // Auto-generate ID
      batch.set(docRef, event);
      addedCount++;

      console.log(`‚úì Queued: "${event.title}"`);
      console.log(`  Status: ${event.status}`);
      console.log(`  Date: ${event.date.toISOString()}`);
      console.log(`  Location: ${event.location}`);
      console.log('');
    }

    // Commit batch
    await batch.commit();

    console.log(`‚úÖ Successfully migrated ${addedCount} events to Firestore!\n`);

    // Verify
    const allEvents = await eventsRef.get();
    console.log(`üìä Verification: Firestore now has ${allEvents.size} total events\n`);

    // Show events by status
    const upcoming = allEvents.docs.filter(doc => doc.data().status === 'upcoming');
    const past = allEvents.docs.filter(doc => doc.data().status === 'past');

    console.log(`   Upcoming: ${upcoming.length}`);
    console.log(`   Past: ${past.length}\n`);

    console.log('‚úÖ Migration complete!');
    console.log('Next steps:');
    console.log('  1. Update events.js to fetch from Firestore');
    console.log('  2. Remove hardcoded events from events.js');
    console.log('  3. Deploy changes\n');

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error migrating events:', error);
    process.exit(1);
  }
}

migrateEvents();
